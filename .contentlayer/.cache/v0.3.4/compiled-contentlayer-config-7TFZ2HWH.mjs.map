{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType } from \"@contentlayer/source-files\";\nimport { makeSource } from \"@contentlayer/source-remote-files\";\nimport { exec } from \"node:child_process\";\nimport { promisify } from \"node:util\";\nimport * as fs from \"node:fs/promises\";\nimport * as path from \"node:path\";\n\n// Import remark and rehype plugins\nimport remarkGfm from \"remark-gfm\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport rehypeSlug from \"rehype-slug\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\n\nconst execAsync = promisify(exec);\n\nconst syncContentFromGit = async (contentDir) => {\n  const syncRun = async () => {\n    const gitUrl = \"git@github.com:Mehulsingh1010/hastakriti-docs.git\";\n\n    // Ensure the content directory exists\n    try {\n      await fs.mkdir(contentDir, { recursive: true });\n    } catch (error) {\n      console.log(\"Directory already exists or cannot be created:\", error);\n    }\n\n    const sync = async () => {\n      try {\n        // Check if it's already a git repository\n        const isGitRepo = await fs\n          .access(path.join(contentDir, \".git\"))\n          .then(() => true)\n          .catch(() => false);\n\n        if (isGitRepo) {\n          // If exists, pull latest changes\n          console.log(\"Pulling latest changes...\");\n          await execAsync(\"git pull\", {\n            cwd: contentDir,\n            shell: true,\n          });\n        } else {\n          // If not exists, clone the repo\n          console.log(\"Cloning repository...\");\n          await execAsync(`git clone ${gitUrl} .`, {\n            cwd: contentDir,\n            shell: true,\n          });\n        }\n      } catch (error) {\n        console.error(\"Git operation failed:\", error);\n      }\n    };\n\n    await sync();\n  };\n\n  let wasCancelled = false;\n  let syncInterval;\n\n  const syncLoop = async () => {\n    await syncRun();\n\n    if (wasCancelled) return;\n\n    // Sync every 5 minutes\n    syncInterval = setTimeout(syncLoop, 1000 * 40);\n  };\n\n  await syncLoop();\n\n  return () => {\n    wasCancelled = true;\n    clearTimeout(syncInterval);\n  };\n};\n\n/** @type {import('contentlayer/source-files').ComputedFields} */\nconst computedFields = {\n  path: {\n    type: \"string\",\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\n  },\n  slug: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n  },\n};\n\nexport const Project = defineDocumentType(() => ({\n  name: \"Project\",\n  filePathPattern: \"projects/**/*.mdx\",\n  contentType: \"mdx\",\n\n  fields: {\n    published: {\n      type: \"boolean\",\n    },\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n      required: true,\n    },\n    date: {\n      type: \"date\",\n    },\n    url: {\n      type: \"string\",\n    },\n    repository: {\n      type: \"string\",\n    },\n  },\n  computedFields,\n}));\n\nexport const Page = defineDocumentType(() => ({\n  name: \"Page\",\n  filePathPattern: \"pages/**/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n    },\n  },\n  computedFields,\n}));\n\n// const syncContentFromGit = async (contentDir) => {\n//   const syncRun = async () => {\n//     const gitUrl = \"https://github.com/cloak233/hastakriti-docs.git\"; // e.g. 'https://github.com/username/content-repo.git'\n\n//     const sync = async () => {\n//       try {\n//         // Check if repo already exists\n//         await spawn(\"git\", [\"status\"], { cwd: contentDir });\n\n//         // If exists, pull latest changes\n//         await spawn(\"git\", [\"pull\"], { cwd: contentDir });\n//       } catch {\n//         // If not exists, clone the repo\n//         await spawn(\"git\", [\"clone\", gitUrl, contentDir]);\n//       }\n//     };\n\n//     await sync();\n//   };\n\n//   let wasCancelled = false;\n//   let syncInterval;\n\n//   const syncLoop = async () => {\n//     await syncRun();\n\n//     if (wasCancelled) return;\n\n//     // Sync every 5 minutes\n//     syncInterval = setTimeout(syncLoop, 1000 * 60 * 5);\n//   };\n\n//   await syncLoop();\n\n//   return () => {\n//     wasCancelled = true;\n//     clearTimeout(syncInterval);\n//   };\n// };\n\nconsole.log(\"Plugins loaded:\", {\n  remarkGfm: !!remarkGfm,\n  rehypePrettyCode: !!rehypePrettyCode,\n  rehypeSlug: !!rehypeSlug,\n  rehypeAutolinkHeadings: !!rehypeAutolinkHeadings,\n});\n\nexport default makeSource({\n  syncFiles: syncContentFromGit,\n  contentDirPath: \"content-repo\",\n  documentTypes: [Page, Project],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      [\n        rehypePrettyCode,\n        {\n          theme: \"github-dark\",\n          onVisitLine(node) {\n            if (node.children.length === 0) {\n              node.children = [{ type: \"text\", value: \" \" }];\n            }\n          },\n          onVisitHighlightedLine(node) {\n            node.properties.className.push(\"line--highlighted\");\n          },\n          onVisitHighlightedWord(node) {\n            node.properties.className = [\"word--highlighted\"];\n          },\n        },\n      ],\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: [\"subheading-anchor\"],\n            ariaLabel: \"Link to section\",\n          },\n        },\n      ],\n    ],\n  },\n});\n"],
  "mappings": "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",
  "names": []
}
